<DataTemplate x:Key="DataTemplate_IEnumerable">
    <ListBox ItemsSource="{Binding}" Width="350" Margin="0,5,0,10">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Padding="5,0,5,0" Text="{Binding}" />
                    <TextBox Text="{Binding Path=.,Mode=TwoWay}" Width="80"/>
                </StackPanel>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>
</DataTemplate>

        <ContentPresenter Grid.Row="1" Name="PresentWindow"
                          Content="{Binding}">
        </ContentPresenter>

IList<string> StringList = new List<string>();
this.DataContext = StringList;
var template = (DataTemplate)Application.Current.Resources["DataTemplate_IEnumerable"];
PresentWindow.ContentTemplate = template;

1、上面的方法可以编辑界面，不引发异常；但目标源不更新。

            <DataGrid AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserSortColumns="False"   
                  ItemsSource="{Binding}">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="ID" Binding="{Binding Path=.,Mode=TwoWay}"/>
                </DataGrid.Columns>
            </DataGrid>
2、同1可编辑界面，不引发异常；失去焦点，界面返回原值。

这种情况的出现，本人认为在绑定的源数据上，没有属性操作造成的；获得源数据可能使用反射，但设置数据则需求
提供属性设置接口...

将上面的string类型替换成
        public class MyString
        {
            public string Val { get; set; }
        }
类型，即可实现修改源数据，若为值类型
        public struct MyString
        {
            public string Val { get; set; }
        }
则和上面1、一样可以编辑界面，但数据源中的数据没有发生改变

